name: Validate Task Execution
permissions:
  contents: read
  pull-requests: write

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**/task.json'
      - 'envs/**/*.py'
      - '.github/workflows/validate-tasks.yml'
      - 'scripts/task_validator.py'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**/task.json' 
      - 'envs/**/*.py'
      - '.github/workflows/validate-tasks.yml'
      - 'scripts/task_validator.py'
  workflow_dispatch:
    inputs:
      task_file:
        description: 'Specific task.json file to validate (optional)'
        required: false
        type: string
      environment:
        description: 'Specific environment to test (optional)'
        required: false
        type: string

jobs:
  validate-tasks:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-json-report pytest-html
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        # Install common dependencies for task validation
        pip install jsonschema deepdiff typing-extensions
        
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for git diff
        
    - name: Find changed task.json files
      id: find-tasks
      run: |
        if [ -n "${{ github.event.inputs.task_file }}" ]; then
          echo "tasks=${{ github.event.inputs.task_file }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.event_name }}" = "pull_request" ]; then
          # Get the correct base branch reference
          base_ref="${{ github.event.pull_request.base.ref }}"
          head_ref="${{ github.event.pull_request.head.ref }}"
          
          echo "Comparing $head_ref against base branch: $base_ref"
          
          # Get all changed files using the correct git references
          all_changed=$(git diff --name-only "origin/$base_ref"...HEAD)
          
          # If that fails, try alternative approaches
          if [ $? -ne 0 ]; then
            echo "Git diff failed, trying alternative method..."
            # Try using the merge base
            merge_base=$(git merge-base HEAD "origin/$base_ref" 2>/dev/null || echo "")
            if [ -n "$merge_base" ]; then
              all_changed=$(git diff --name-only "$merge_base"...HEAD)
            else
              # Last resort: compare with HEAD~1
              all_changed=$(git diff --name-only HEAD~1...HEAD)
            fi
          fi
          
          echo "All changed files:"
          echo "$all_changed"
          
          # Filter for files ending with /task.json or just task.json
          tasks=$(echo "$all_changed" | grep -E '(^|/)task\.json$' | head -20 | tr '\n' ' ')
          echo "Found task.json files: $tasks"
          echo "tasks=$tasks" >> $GITHUB_OUTPUT
        else
          # For push events, find recent task.json files at any depth
          tasks=$(find . -name "task.json" -type f -mtime -1 | head -10 | tr '\n' ' ')
          echo "tasks=$tasks" >> $GITHUB_OUTPUT
        fi
        
    - name: Check if validation needed
      id: check-validation
      run: |
        tasks="${{ steps.find-tasks.outputs.tasks }}"
        if [ -z "$tasks" ] || [ "$tasks" = " " ]; then
          echo "No task.json files to validate"
          echo "skip=true" >> $GITHUB_OUTPUT
          # Create empty report for consistency
          echo '{"summary": {"total": 0, "passed": 0, "failed": 0, "success_rate": 100.0}, "results": [], "message": "No task.json files found to validate"}' > validation-report.json
        else
          echo "Will validate: $tasks"
          echo "skip=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Validate task files
      if: steps.check-validation.outputs.skip == 'false'
      run: |
        python scripts/task_validator.py \
          --tasks "${{ steps.find-tasks.outputs.tasks }}" \
          --environment "${{ github.event.inputs.environment }}" \
          --output-format json \
          --report-file validation-report.json
          
    - name: Generate HTML report
      if: always() && hashFiles('validation-report.json') != ''
      run: |
        python scripts/generate_report.py \
          --input validation-report.json \
          --output validation-report.html
          
    - name: Create standalone HTML report
      if: always() && hashFiles('validation-report.json') != ''
      run: |
        python scripts/generate_standalone_report.py \
          --input validation-report.json \
          --output validation-report-standalone.html \
          --run-number ${{ github.run_number }}
          
    - name: Upload validation report
      if: always() && hashFiles('validation-report.json') != ''
      uses: actions/upload-artifact@v4
      with:
        name: validation-report-${{ github.run_number }}
        path: |
          validation-report.json
          validation-report.html
          validation-report-standalone.html
        if-no-files-found: ignore
        retention-days: 30
          
    - name: Comment PR with results
      if: github.event_name == 'pull_request' && always() && hashFiles('validation-report.json') != ''
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          try {
            const report = JSON.parse(fs.readFileSync('validation-report.json', 'utf8'));
            
            const passed = report.summary.passed;
            const failed = report.summary.failed;
            const total = passed + failed;
            const successRate = total > 0 ? ((passed / total) * 100).toFixed(1) : 0;
            
            const status = failed === 0 ? '‚úÖ' : '‚ùå';
            
            let comment = `## ${status} Task Validation Results\n\n`;
            comment += `**Summary:** ${passed}/${total} tasks passed (${successRate}%)\n\n`;
            
            if (failed > 0) {
              comment += `### ‚ùå Failed Tasks:\n`;
              report.results.filter(r => !r.success).forEach(result => {
                comment += `- **${result.task_file}**: ${result.error || 'Action sequence validation failed'}\n`;
              });
              comment += '\n';
            }
            
            if (passed > 0) {
              comment += `### ‚úÖ Passed Tasks:\n`;
              report.results.filter(r => r.success).slice(0, 5).forEach(result => {
                comment += `- **${result.task_file}**: ${result.actions_validated} actions validated\n`;
              });
              if (passed > 5) {
                comment += `- ... and ${passed - 5} more\n`;
              }
            }
            
            comment += `\nüìä [Download Detailed Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts) - Includes standalone HTML with action sequence comparison`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log('Could not read validation report:', error.message);
          }
          
    - name: Fail if validation errors
      run: |
        if [ -f validation-report.json ]; then
          failed=$(python -c "import json; report = json.load(open('validation-report.json')); print(report['summary']['failed'])")
          if [ "$failed" -gt "0" ]; then
            echo "‚ùå $failed task(s) failed validation"
            exit 1
          else
            echo "‚úÖ All tasks passed validation"
          fi
        else
          echo "‚ùå Validation report not found"
          exit 1
        fi